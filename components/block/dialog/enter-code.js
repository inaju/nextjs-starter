"use client"

import { Button } from "@/components/ui/button"
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"

import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage
} from "@/components/ui/form"
import { InputOTP, InputOTPGroup, InputOTPSlot } from "@/components/ui/input-otp"
import { useHandleEvent } from "@/hooks/useHandleEvent"
import { User, Users } from "lucide-react"
import { useSession } from "next-auth/react"
import Image from "next/image"
import { useEffect, useState } from "react"
import { z } from "zod"
import { toast } from "@/components/ui/use-toast"

const EnterCodeDialog = ({ ...props }) => {
    const { attendEventFunc } = useHandleEvent()
    const { data: session, ...rest } = useSession()
    const userId = session?.user?.id
    const [open, setOpen] = useState(false);
    console.log(props ,'props?.event?.attendees?.includes(userId)')
    const FormSchema = z.object({
        code: z.string().min(4, {
            message: "event code must be at least 4 characters.",
        }),
    })
    const form = useForm({
        resolver: zodResolver(FormSchema),
        defaultValues: {
            code: "",
        },
    })

    async function onSubmit(data) {
        const response = {
            "eventId": props?.event?.eventId,
            "userId": session.user.id,
            "isAttending": true,
            "eventCode": data.code
        }
        attendEventFunc.mutate(response)
        form?.reset()
    };

    const handleOpenDialog = () => {
        setOpen(!open)
    }
    useEffect(() => {
        closeDrawer();
    }, [attendEventFunc])

    const closeDrawer = () => {
        if (!attendEventFunc.isPending
            && attendEventFunc.data?.status !== 400
            && attendEventFunc.data != undefined) {
            setOpen(false)
            props?.setIsAttendingEvent(true)
            toast({
                title: "Success !",
                description: `See you at ${attendEventFunc.data.data?.name}`
            })
        }
    }
    return (
        <Dialog open={open} onOpenChange={() => handleOpenDialog()}>
            <DialogTrigger asChild>
                <Button className="flex gap-3 border border-primary"
                    variant={!props?.isAttendingEvent ? "outline" : "default"}
                >
                    {!props?.isAttendingEvent ?
                        <>
                            <User size={15} />
                            Attend Event
                        </> :
                        <>
                            <Users size={15} />
                            Attending
                        </>
                    }
                </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
                <DialogHeader>
                    <DialogTitle className="mb-6">Attend Event</DialogTitle>
                    <DialogDescription className="flex flex-col items-start">
                        Please Enter Event Code generated by
                        <div className="flex gap-2 items-center border-2 p-3 rounded-lg w-fit mt-2">
                            <Image src={props?.eventOrganizer?.image} alt="event organizer" height={30} width={30} className="rounded-full border border-1 border-slate-600" />
                            <div className="text-slate-800 font-semibold">

                                {props?.eventOrganizer?.name}
                            </div>
                        </div>
                    </DialogDescription>
                </DialogHeader>
                <Form {...form} >
                    <form onSubmit={form.handleSubmit(onSubmit)} className="mt-4">
                        <FormField
                            control={form.control}
                            name="code"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Event Code</FormLabel>
                                    <FormControl>
                                        <InputOTP maxLength={4} {...field}>
                                            <InputOTPGroup>
                                                <InputOTPSlot index={0} />
                                                <InputOTPSlot index={1} />
                                                <InputOTPSlot index={2} />
                                                <InputOTPSlot index={3} />
                                            </InputOTPGroup>
                                        </InputOTP>
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <DialogFooter className="mt-4">
                            <Button disabled={attendEventFunc?.isPending} type="submit">
                                {attendEventFunc?.isPending ? "Loading..." : "Submit"}
                            </Button>
                        </DialogFooter>
                    </form>
                </Form>

            </DialogContent>
        </Dialog>
    )
}

export default EnterCodeDialog
